# rename me to episodescanner.settings

# Database settings
<database>
  # type can be mysql or mssql
  type = mysql
  
  <connection>
    # for MySQL simply insert the hostname / IP
    host = 192.168.0.50
	# for MSSQL use normally hostname / IP \ SQLEXPRESS
    # host = 192.168.0.50\SQLEXPRESS
	
	# Datenbankname
	# MpTvDb for Mediaportal / fortherecord for 4TR
    name = MpTvDb
	
    # for MySQL root | for MSSQL sa
    user = root
	
    # default password for mediaportal is MediaPortal
    pw = MediaPortal
  </connection>

  # Are you using 4TR instead of MP TVServer  
  4tr = no
  
  # MySQL only
  <mysql>
    # optimize MySQL tables every X hours (0 for disabling)
    optimize = 2
  </mysql>
</database>

<episodescan>
  # yes / no
  active = yes
  # german www.wunschliste.de
  <wunschliste>
    # yes / no
    active = yes
	# priority (1-10) lower value higher priority
	prio 1
  </wunschliste>
  # german www.fernsehserien.de
  <fernsehserien>
    # yes / no
    active = yes
	# priority (1-10) lower value higher priority
	prio 3
  </fernsehserien>
  # int. www.thetvdb.com
  <thetvdb>
    # yes / no
    active = yes
	# priority (1-10) lower value higher priority
	prio 2
    # you can also use multiple languages to check
    languages = de
    languages = en
  </thetvdb>
  
  <episode_stubstitutions>
	Teil\s+\(1\) = (1)
	Teil\s+\(2\) = (2)
	Teil\s+\(3\) = (3)
	Teil\s+\(4\) = (4)
	Teil\s+1 = (1)
	Teil\s+2 = (2)
	Teil\s+3 = (3)
	Teil\s+4 = (4)
	" & " = " und "
	" and " = " und "
  </episode_stubstitutions>
</episodescan>

# episodename substitutions
# here you can define substitiutions for your episodenames
# f.e. "1" to "one"
# f.e. "part1" to "one"
# this avoids problems with different namings
# you can use regex on the left side here if you want
%episode_stubstitutions = (
);

# SQLite database backup every X hours (NOT MSSQL or MySQL)
$db_backup = 1; # on/off
$db_backup_interval = 2; # in hours
$db_backup_delete = 48; # delete backups older than
$db_backup_sqlite_path = 'O:\DB\*.db3';
$db_backup_sqlite_backuppath = 'O:\DB\backup';

# remove recordings which are also listed at tvseries
$cleanup_recordings_tvseries = 1; # on / off
$cleanup_recordings_tvseries_db = 'O:\\DB\\TVSeriesDatabase4.db3';
$cleanup_recordings_tvseries_db_mainpath = '\\\\192.168.178.100\\mp.data\\VID\\';
$cleanup_recordings_tvseries_recordings_mainpath = 'O:\\VID\\';

# delete recordings from the recordings DB of MP when the file does not exist
$cleanup_recordingdb = 0; # on / off

# delete empty folders and deletes .xml, .txt, .logo, .jpg files (if the .ts file is removed) in recordingdir
$cleanup_recordingfiles = 0;
# video file extensions
@cleanup_recordingdir_ext = ('.ts', '.avi', '.mkv');
# folder where the recordings are stored
$cleanup_recordingdir = 'O:\VID';

# use thumb generation?
$thumbs = 0;
# create thumbs for the following folders and subfolders
@thumb_dirs = ('O:\VID', 'D:\VID123\ABC');
# try to crrate thumb for tiles with the following file extensions
@thumb_fileext = ('.ts', '.avi', '.mkv');
# use the following programs to create thumbs
@thumb_progs = ( {
                   # internal MTN
                   prog => 'mtn\\mtn.exe -D 6 -B 420 -E 600 -c 1 -r 1 -s 300 -t -i -w 0 -n -P "${filename}"',
                   thumb_filename => '${basedir}\\${basefile}_s.jpg',
                   timeout => 10,
                  },
                  {
                   # external videoLAN
                   prog => '"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" --video-filter scene -V dummy --intf dummy --dummy-quiet --scene-width=-1 --scene-height=576 --scene-format=jpg --scene-replace --scene-ratio 24 --start-time=600 --stop-time=601 --scene-replace --scene-prefix=thumb --scene-path="O:\\" "${filename}" "vlc://quit"',
                   thumb_filename => 'O:\\thumb.jpg',
                   timeout => 3,
                  },
                  {
                   # internal MTN variant 2
                   prog => 'mtn2\\mtn.exe -D 8 -B   0 -E   0 -c 1 -r 1 -s  60 -t -i -w 0 -n -P "${filename}"',
                   thumb_filename => '${basedir}\\${basefile}_s.jpg',
                   timeout => 10,
                  }
                );

# you can setup here the running of external commands every X hours
# example:
# run C:\path\tool every 5 hours and C:\path2\tool2 every 10 hours
# @run_external_commans = ('C:\path\tool|5', 'C:\path2\tool2|10');
@run_external_commans = ();

# after each run sleep for x seconds
$sleep = 60;

1;